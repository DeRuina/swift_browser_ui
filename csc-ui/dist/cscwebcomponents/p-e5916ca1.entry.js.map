{"version":3,"names":["cOtpInputCss","COtpInput","this","_backSpacePressed","_debounce","_isPasting","_inputs","Array","length","fill","_value","onValidationMessageChange","_updateStatusText","_emitValue","requestAnimationFrame","map","input","value","join","isFullyFilled","changeValue","emit","completion","_getElements","event","target","nextElement","nextElementSibling","previousElement","previousElementSibling","_onFocus","index","select","_onKeyDown","key","focus","id","elementId","_uniqueId","_onInput","isNaN","preventDefault","data","_onPaste","pasteData","clipboardData","getData","split","entries","nextElementIndex","Math","min","clearTimeout","window","setTimeout","statusText","valid","validation","trim","_renderInput","h","ref","el","type","maxlength","onFocus","onInput","onKeyDown","onPaste","componentWillLoad","render","classes","hideDetails","Host","style","toString","class","_","hint","inputId"],"sources":["src/components/c-otp-input/c-otp-input.scss?tag=c-otp-input&encapsulation=shadow","src/components/c-otp-input/c-otp-input.tsx"],"sourcesContent":[":host {\n  --c-otp-input-height: 56px;\n  --c-otp-input-width: 42px;\n\n  display: block;\n}\n\n.visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n}\n\n.c-otp-input {\n  backface-visibility: hidden;\n  transform: translate3d(0, 0, 0);\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-auto-columns: minmax(auto, var(--c-otp-input-width));\n  gap: 8px;\n  margin-bottom: 8px;\n\n  &--hide-details {\n    margin-bottom: 0;\n  }\n\n  input {\n    height: var(--c-otp-input-height);\n    width: 100%;\n    min-width: 24px;\n    max-width: var(--c-otp-input-width);\n    text-align: center;\n    border-radius: 4px;\n    font-size: 24px;\n    box-shadow: inset 0 0 0 1px var(--csc-dark-grey);\n    border: none;\n\n    &:focus {\n      box-shadow: inset 0 0 0 2px var(--csc-primary);\n      outline: none;\n    }\n  }\n\n  c-message {\n    grid-row: 2;\n    grid-column: 1 / span var(--c-otp-input-count);\n  }\n}\n","import {\n  Component,\n  Event,\n  EventEmitter,\n  Host,\n  Prop,\n  State,\n  Watch,\n  h,\n} from '@stencil/core';\n\n/**\n * @group Form\n */\n@Component({\n  tag: 'c-otp-input',\n  styleUrl: 'c-otp-input.scss',\n  shadow: true,\n})\nexport class COtpInput {\n  /**\n   * Hide the hint and error messages\n   */\n  @Prop() hideDetails = false;\n\n  /**\n   * Hint text for the input\n   */\n  @Prop() hint = '';\n\n  /**\n   * Id of the element\n   */\n  @Prop({ attribute: 'id' }) elementId!: string;\n\n  /**\n   * Length of the OTP code\n   */\n  @Prop() length = 6;\n\n  /**\n   * Set the valid√≠ty of the input\n   */\n  @Prop() valid = true;\n\n  /**\n   * Custom validation message\n   */\n  @Prop() validation = 'Required field';\n\n  /**\n   * Run on input - returns the current value\n   */\n  @Event({ bubbles: false }) changeValue: EventEmitter<string>;\n\n  /**\n   * Run on completion - returns the current value\n   */\n  @Event({ bubbles: false }) completion: EventEmitter<string>;\n\n  @State() statusText = '';\n\n  private _backSpacePressed = false;\n\n  private _debounce = null;\n\n  private _isPasting = false;\n\n  private _inputs: HTMLInputElement[] = new Array(this.length).fill(null);\n\n  private static _uniqueId = 0;\n\n  private _value = '';\n\n  @Watch('validation')\n  onValidationMessageChange() {\n    this._updateStatusText();\n  }\n\n  private _emitValue() {\n    requestAnimationFrame(() => {\n      this._value = [...this._inputs].map((input) => input.value).join('');\n\n      const isFullyFilled = this._value.length === this.length;\n\n      this.changeValue.emit(isFullyFilled ? this._value : null);\n\n      if (isFullyFilled) {\n        this.completion.emit(this._value || null);\n      }\n\n      this._updateStatusText();\n    });\n  }\n\n  private _getElements(event: InputEvent | KeyboardEvent) {\n    const target = event.target as HTMLInputElement;\n    const nextElement = target.nextElementSibling as HTMLInputElement;\n    const previousElement = target.previousElementSibling as HTMLInputElement;\n\n    return { target, nextElement, previousElement };\n  }\n\n  /**\n   * Select value in an input on focus\n   */\n  private _onFocus(index: number) {\n    this._inputs[index].select();\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    this._backSpacePressed = false;\n\n    const { target, previousElement } = this._getElements(event);\n\n    if (event.key === 'Backspace') {\n      this._backSpacePressed = true;\n\n      // go to the previous element if the input is empty\n      if (previousElement && !target.value) {\n        previousElement.focus();\n      }\n\n      this._emitValue();\n    }\n  }\n\n  get id() {\n    return this.elementId || `c-otp-input--${COtpInput._uniqueId}`;\n  }\n\n  private _onInput(event: InputEvent) {\n    const { target, nextElement, previousElement } = this._getElements(event);\n\n    // exclude non numeric input values\n    if (isNaN(+target.value)) {\n      event.preventDefault();\n\n      target.value = null;\n\n      return;\n    }\n\n    if (this._isPasting) {\n      this._isPasting = false;\n\n      return;\n    }\n\n    if (this._backSpacePressed) {\n      return;\n    }\n\n    if (event.data) {\n      nextElement?.focus();\n    } else {\n      previousElement?.focus();\n    }\n\n    this._emitValue();\n  }\n\n  // TODO:  prevent pasting non numeric values and iclude validation\n  private _onPaste(event: ClipboardEvent) {\n    event.preventDefault();\n\n    const pasteData = event.clipboardData.getData('text');\n\n    if (isNaN(+pasteData)) {\n      return;\n    }\n\n    this._isPasting = true;\n\n    for (const [index, value] of pasteData.split('').entries()) {\n      // prevent pasting too long codes\n      if (index >= this._inputs.length) {\n        continue;\n      }\n\n      this._inputs[index].value = null;\n      this._inputs[index].value = value;\n    }\n\n    const nextElementIndex = Math.min(this.length, pasteData.length) - 1;\n\n    requestAnimationFrame(() => {\n      this._inputs[nextElementIndex].focus();\n\n      this._emitValue();\n    });\n  }\n\n  private _updateStatusText() {\n    if (this._debounce !== null) {\n      clearTimeout(this._debounce);\n      this._debounce = null;\n    }\n\n    this._debounce = window.setTimeout(() => {\n      this.statusText = this.valid ? '' : `Error: ${this.validation} `;\n      this.statusText += `Currently entered - ${this._value\n        .split('')\n        .join(' - ')}`;\n      this.statusText = this.statusText.trim();\n\n      this._debounce = null;\n    }, 1400);\n  }\n\n  private _renderInput(index: number) {\n    return (\n      <input\n        id={`c-otp-input--${COtpInput._uniqueId}-${index + 1}`}\n        ref={(el) => (this._inputs[index] = el as HTMLInputElement)}\n        aria-label={`Enter code - digit number - ${index + 1} of ${\n          this.length\n        }`}\n        type=\"tel\"\n        maxlength=\"1\"\n        onFocus={() => this._onFocus(index)}\n        onInput={(event) => this._onInput(event)}\n        onKeyDown={(event) => this._onKeyDown(event)}\n        onPaste={(event) => index === 0 && this._onPaste(event)}\n      />\n    );\n  }\n\n  componentWillLoad() {\n    COtpInput._uniqueId += 1;\n  }\n\n  render() {\n    const classes = {\n      'c-otp-input': true,\n      'c-otp-input--hide-details': this.hideDetails,\n    };\n\n    return (\n      <Host\n        id={this.id}\n        style={{ '--c-otp-input-count': this.length.toString() }}\n      >\n        <div\n          id={'announce-' + this.id}\n          class=\"visuallyhidden\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          {this.statusText}\n        </div>\n\n        <div class={classes}>\n          {new Array(this.length)\n            .fill(0)\n            .map((_, index) => this._renderInput(index))}\n\n          <c-message\n            hint={this.hint}\n            inputId={this.elementId}\n            valid={this.valid}\n            validation={this.validation}\n          />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}
